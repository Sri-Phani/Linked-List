#include <bits/stdc++.h>
using namespace std;
class Node{
    public:
        int data;
        Node*next;
        Node* prev;
    public:
        Node(int data1,Node* next1,Node* prev1)
        {
            data=data1;
            next=next1;
            prev=prev1;
        }
    public:
        Node(int data1){
            data=data1;
            next=nullptr;
            prev=nullptr;
        }
};

Node* convert2ArrDLL(vector<int>&arr)
{
    Node * head=new Node(arr[0]);
    Node * prev=head;
    for(int i=1;i<arr.size();i++)
    {
        Node *temp=new Node(arr[i],nullptr,prev);
        prev->next=temp;
        prev=temp;
    }
    return head;
}
void printall(Node * head)
{
    Node * temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}

Node* deleteathead(Node * head)
{
    if(head==NULL || head->next==NULL)
    {
        return NULL;
    }
    Node* temp=head;
    head=head->next;
    head->prev=nullptr;
    temp->next=nullptr;
    free(temp);
    return head;
}
Node* deleteattail(Node* head)
{
    if(head==NULL || head->next==NULL)
    {
        return NULL;
    }
    Node* temp=head;
    while(temp->next!=NULL)
    {
        temp=temp->next;
    }
    Node* newtemp=temp->prev;
    newtemp->next=nullptr;
    temp->prev=nullptr;
    delete temp;
    return head;
}
Node* deleteatpos(Node* head,int k)
{
    int c=0;
    if(head==NULL || head->next==NULL) return NULL;
    Node* ktemp=head;
    while(ktemp!=NULL)
    {
        c+=1;
        if(c==k)
        {
            break;
        }
        ktemp=ktemp->next;
    }
    Node* back=ktemp->prev;
    Node* front=ktemp->next;
    if(back==NULL and front==NULL) return NULL;
    else if(back==NULL) return deleteathead(head);
    else if(front==NULL) return deleteattail(head);
    else{
        back->next=front;
        front->prev=back;
    }
    ktemp->next=nullptr;
    ktemp->prev=nullptr;
    free(ktemp);
    return head;
}
void deleteatval(Node* head)
{
    Node* back=head->prev;
    Node* front=head->next;
    if(front==NULL){
        back->next=nullptr;
        front->prev=nullptr;
        free(head);
        return;
    }
    back->next=front;
    front->prev=back;
    head->next=head->prev=nullptr;
    free(head);
}

int main() {
    vector<int>arr={1,2,3,45,64,85,95,100,200};
    Node* head=convert2ArrDLL(arr);
    printall(head);
    head=deleteathead(head);
    printall(head);
    head=deleteattail(head);
    printall(head);
    head=deleteatpos(head,3);
    printall(head);
    // deleteatval(head->next);//deletes 2
    deleteatval(head->next->next->next);//deletes 85
    printall (head);

}
 